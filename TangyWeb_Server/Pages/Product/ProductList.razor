@page "/product"

@inject IProductRepository _productRepository
@inject  IJSRuntime _jsRuntime
@inject IFileUpload _fileUpload
@inject NavigationManager _navigationManager



<_DeleteConfiremation IsParentComponentProcessing="IsLoading" ConfirmationChanged="ConfirmDeleteClick"> </_DeleteConfiremation>

<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Product List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="product/create" class="btn btn-primary form-control">Add New Product</a>
    </div>
    <div class="col-12">
        @if(Products.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Shop Favourites</th>
                        <th>Customer Favourites</th>
                        <th>Category</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var prod in Products)
                    {
                        <tr>
                            <td>
                                @prod.Name
                            </td>
                            <th>
                                <input type="checkbox" disabled checked="@prod.ShopFavourites"/>
                            </th>
                            <th>
                                <input type="checkbox" disabled checked="@prod.CustomerFavourites" />
                            </th>
                            <th>
                                @prod.Category.Name
                            </th>
                            <td>
                            <NavLink href="@($"product/edit/{prod.Id}")" class="btn-info btn">Edit</NavLink>
                            <NavLink href="@($"product/price/{prod.Id}")" class="btn-success btn">Price</NavLink>
                            <button class="btn btn-danger" @onclick="() => HandleDelete(prod.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (IsLoading)
            {
                //loading gif
                <div class="text-center">
                    <img src="images/loading.gif">
                </div>
            }
            else
            {
                //no records
                <p>No records found.</p>
            }
        }
    </div>
</div>


@code {
    private IEnumerable<ProductDTO> Products { get; set; } = new List<ProductDTO>();
    public bool IsLoading { get; set; }
    private int DeleteProductId { get; set; } = 0;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        if (!authState.User.Identity.IsAuthenticated)
        {
            var uri = new Uri(_navigationManager.Uri);
            _navigationManager.NavigateTo($"identity/account/login?returnUrl={uri.LocalPath}", forceLoad:true);
        }
        else
        {
            if (!authState.User.IsInRole(Tangy_Common.SD.Role_Admin))
            {
                _navigationManager.NavigateTo("/ErrorPage");
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProducts();            
        }
    }

    private async Task LoadProducts()
    {
        IsLoading = true;
        StateHasChanged();
        Products = await _productRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private void HandleDelete(int id)
    {
        DeleteProductId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfiremationModel");
    }

    public async Task ConfirmDeleteClick(bool isConfirmed)
    {
        IsLoading = true;
        if (isConfirmed && DeleteProductId != 0)
        {
            //delete
            //await Task.Delay(5000);
            ProductDTO product = await _productRepository.Get(DeleteProductId);
            if (!product.ImageUrl.Contains("default.png"))
            {
                _fileUpload.DeleteFile(product.ImageUrl);
            }
            await _productRepository.Delete(DeleteProductId);
            await _jsRuntime.ToastrSuccess("Product Deleted Successfully");
            await LoadProducts(); ;
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfiremationModel");
        }
        IsLoading = false;
    }
}
